# follow environment variables
# file: example.env
#  -------- Env ----------
# HTTPS=http
# DOMAIN=localhost
# PREFIX=/jupyterhub
# CLIENT_ID=
# CLIENT_SECRET=
# CRYPT_KEY=changeme
# OPENID_URL=http://localhost:8080/auth/realms/master/.well-known/openid-configuration
#  -------- END Env ----------

version: "3"
services:
  jupyterhub:
    image: jupyterhub-keycloak:latest
    hostname: jupyterhub

    # ports:
    #   - 8000:8000

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - jupyterhub_data:/data

    environment:
      DOCKER_NETWORK_NAME: jupyterhub_swarm_network # required (docker network name)
      # JupyterHub settings
      JUPYTERHUB_CRYPT_KEY: ${CRYPT_KEY} # required (random: openssl rand -base64 32)
      JUPYTERHUB_HOST: ${HTTPS:-http}://${DOMAIN} # Default: http://localhost:8000
      JUPYTERHUB_BASE_URL: ${PREFIX}/ # Default: /

      ## callback keycloak settings
      OAUTH2_CALLBACK_URL: ${HTTPS:-http}://${DOMAIN}${PREFIX}/oauth_callback # Default: ${JUPYTERHUB_HOST}/${JUPYTERHUB_BASE_URL}/oauth_callback
      OAUTH2_LOGOUT_REDIRECT_URL: ${HTTPS:-http}://cmdac.moph.go.th/jupyterhub/ # (set is full logout url) Default: logout to keycloak and redirect to ${JUPYTERHUB_HOST}/${JUPYTERHUB_BASE_URL}

      ## keycloak settings
      KEYCLOAK_OPENID_CONFIG_URL: ${OPENID_URL} # required (openid configuration url)

      # OAuth2 settings
      OAUTH2_CLIENT_ID: ${CLIENT_ID} # required
      OAUTH2_CLIENT_SECRET: ${CLIENT_SECRET} # required

      OAUTH2_SCOPE: openid,profile,roles # Default: openid,profile,email
      OAUTH2_USER_CLAIM: preferred_username # Default: preferred_username
      # OAUTH2_CLAIM_GROUPS_KEY: # Default: resource_access.${OAUTH2_CLIENT_ID}.roles (get with client roles)
      OAUTH2_ALLOWED_GROUPS: jupyter-user # User Group can use jupterhub.  Default: user (support multi groups, ex: user,staff)
      OAUTH2_ADMIN_GROUPS: jupyter-admin # Admin Group can manage and controler jupyterhub.  Default: admin (support multi groups, ex: admin,staff)
      OAUTH2_VALIDATE_SERVER_CERT: 0 # validate oauth2 server certificate. Default: 1

      # Docker image settings
      DOCKER_NOTEBOOK_IMAGE: jupyterlab:latest # Default: jupyter/scipy-notebook:latest
      DOCKER_NOTEBOOK_DIR: /home/jovyan/work # Default: /home/jovyan/work
      DOCKER_SHARE_DIR: /home/jovyan/share # Default: None (not mount) ** if mount share dir you need to set permission directory to chmod 777 or chown 1000:100
      DOCKER_SPAWN_CMD: start-singleuser.sh # Default: start-singleuser.sh

      SPAWNER_CPU_LIMIT: 4 # Default: 2
      SPAWNER_MEM_LIMIT: 12G # Default: 4G
      JUPYTERHUB_IDLE_CULLER_ENABLED: 1 # Default: 1
      JUPYTERHUB_IDLE_CULLER_TIMEOUT: 36000 # 3600 = 1 hour. Default: 3600

    networks:
      - jupyterhub_swarm_network

    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      # if use traefik reverse proxy
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.jupyterhub.tls=true"
        - "traefik.http.routers.jupyterhub.rule=Host(`${DOMAIN}`) && PathPrefix(`${PREFIX}`)"
        - "traefik.http.routers.jupyterhub.entryPoints=web,websecure"
        - "traefik.http.services.jupyterhub.loadbalancer.server.port=8000"
networks:
  # create network first
  # `docker network create --driver=overlay --attachable jupyterhub_swarm_network`
  jupyterhub_network:
    external: true
  proxy: # if use reverse proxy
    external: true

volumes:
  jupyterhub_data:
